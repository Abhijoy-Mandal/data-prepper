buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:6.6.1'
    }
}

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.network.*

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

dependencies {
    integrationTestCompile("junit:junit:${versionMap.junit}")
    integrationTestCompile project(':data-prepper-plugins:elasticsearch')
    integrationTestImplementation "org.awaitility:awaitility:4.0.3"
    integrationTestImplementation "io.opentelemetry:opentelemetry-proto:${versionMap.opentelemetry_proto}"
    integrationTestImplementation 'com.google.protobuf:protobuf-java-util:3.13.0'
    integrationTestImplementation "com.linecorp.armeria:armeria:1.0.0"
    integrationTestImplementation "com.linecorp.armeria:armeria-grpc:1.0.0"
    integrationTestImplementation "org.elasticsearch.client:elasticsearch-rest-high-level-client:7.8.1"
}

/**
 * End-to-end test docker network
 */
task createDataPrepperNetwork(type: DockerCreateNetwork) {
    networkName = "data_prepper_network"
}

task removeDataPrepperNetwork(type: DockerRemoveNetwork) {
    dependsOn createDataPrepperNetwork
    networkId = createDataPrepperNetwork.getNetworkId()
}

/**
 * DataPrepper Docker tasks
 */
task createDataPrepperDockerFile(type: Dockerfile) {
    dependsOn jar
    destFile = project.file('build/docker/Dockerfile')
    from("adoptopenjdk/openjdk14:jre-14.0.1_7-alpine")
    exposePort(21890)
    workingDir("/app")
    copyFile("build/libs/${jar.archiveName}", "/app/data-prepper.jar")
    copyFile("src/integrationTest/resources/pipeline.yml", "/app/pipeline.yml")
    defaultCommand("java", "-jar", "data-prepper.jar", "/app/pipeline.yml")
}

task buildDataPrepperDockerImage(type: DockerBuildImage) {
    dependsOn createDataPrepperDockerFile
    inputDir  = file(".")
    dockerFile  = file("build/docker/Dockerfile")
    images.add("integ-test-pipeline-image")
}

task createDataPrepperDockerContainer(type: DockerCreateContainer) {
    dependsOn buildDataPrepperDockerImage
    dependsOn createDataPrepperNetwork
    hostConfig.portBindings = ['21890:21890']
    hostConfig.network = createDataPrepperNetwork.getNetworkName()
    targetImageId buildDataPrepperDockerImage.getImageId()
}

task startDataPrepperDockerContainer(type: DockerStartContainer) {
    dependsOn createDataPrepperDockerContainer
    targetContainerId createDataPrepperDockerContainer.getContainerId()
    doLast {
        sleep(10*1000)
    }
}

task stopDataPrepperDockerContainer(type: DockerStopContainer) {
    targetContainerId createDataPrepperDockerContainer.getContainerId()
}

/**
 * ODFE Docker tasks
 */
task pullOdfeDockerImage(type: DockerPullImage) {
    image = 'amazon/opendistro-for-elasticsearch:1.9.0'
}

task createOdfeDockerContainer(type: DockerCreateContainer) {
    dependsOn createDataPrepperNetwork
    dependsOn pullOdfeDockerImage
    targetImageId pullOdfeDockerImage.image
    containerName = "node-0.example.com"
    hostConfig.portBindings = ['9200:9200', '9600:9600']
    hostConfig.autoRemove = true
    hostConfig.network = createDataPrepperNetwork.getNetworkName()
    envVars = ['discovery.type':'single-node']
}

task startOdfeDockerContainer(type: DockerStartContainer) {
    dependsOn createOdfeDockerContainer
    targetContainerId createOdfeDockerContainer.getContainerId()

    doLast {
        sleep(90*1000)
    }
}

task stopOdfeDockerContainer(type: DockerStopContainer) {
    targetContainerId createOdfeDockerContainer.getContainerId()
}

/**
 * End to end test. Spins up ODFE and DataPrepper docker containers, then runs the integ test
 * Stops the docker containers when finished
 */
task rawSpanEndToEndTest(type: Test) {
    dependsOn build
    dependsOn startOdfeDockerContainer
    dependsOn startDataPrepperDockerContainer
    startDataPrepperDockerContainer.mustRunAfter 'startOdfeDockerContainer'

    description = 'Runs the raw span integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    filter {
        includeTestsMatching "com.amazon.dataprepper.integration.EndToEndRawSpanTest*"
    }

    finalizedBy stopOdfeDockerContainer
    finalizedBy stopDataPrepperDockerContainer
    finalizedBy removeDataPrepperNetwork
}

task serviceMapEndToEndTest(type: Test) {
    dependsOn build
    dependsOn startOdfeDockerContainer
    dependsOn startDataPrepperDockerContainer
    startDataPrepperDockerContainer.mustRunAfter 'startOdfeDockerContainer'

    description = 'Runs the raw span integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    filter {
        includeTestsMatching "com.amazon.dataprepper.integration.EndToEndServiceMapTest*"
    }

    finalizedBy stopOdfeDockerContainer
    finalizedBy stopDataPrepperDockerContainer
    finalizedBy removeDataPrepperNetwork
}
